Point pointOne = new Point();
Point pointTwo = new Point();
Point moveTopoint = new Point();

/*Distance to Point Section*/
println("Enter x for point 1");
pointOne.x = readDouble();
println("Enter y for point 1");
pointOne.y = readDouble();
println("Enter x for point 2");
pointTwo.x = readDouble();
println("Enter y for point 2");
pointTwo.y = readDouble();

double result = pointOne.distanceTo(pointTwo);
println("The distance is: " + result);

/*Distance to origin section*/

result = pointOne.distanceToOrigin();
println("Point 1 distance to origin is: " + result);

println("Enter X of new location of point 1");
moveTopoint.x = readDouble();
println("Enter Y of new location of point 1");
moveTopoint.y = readDouble();

pointOne.moveTo(moveTopoint.x, moveTopoint.y);
println("The moved (point 1) point is now at: " + pointOne.x + " " + pointOne.y);

println("We will now set point 1 to be as point 2");
pointOne.moveTo(pointTwo);
println("Point 1's co-ordinates are now " + pointOne.x + " " + pointOne.y);

Point clonedPoint = pointOne.clone(pointOne);
println("We have just cloned point 1 to a new point 'Cloned Point' it's co-ordinates are: " + clonedPoint.x + " " + clonedPoint.y);

Point oppositePoint = pointOne.opposite(pointOne);
println("We will now clone and return opposite values of point 1 in a new point, Opposite Point: " + oppositePoint.x + " " + oppositePoint.y);

class Point {
	double x;
	double y;
	
		double distanceTo(Point pointTwo)
		{
			double xCalc = Math.pow(x-pointTwo.x,2);
			double yCalc = Math.pow(y-pointTwo.y,2);
			double sqrtDifference = Math.sqrt(xCalc+yCalc);
			return sqrtDifference;
		}
		
		double distanceToOrigin()
		{
			Point origin = new Point();
			origin.x=0;
			origin.y=0;
			double result = distanceTo(origin);
			return result;
		}
		
		void moveTo(double x, double y)
		{
			this.x = x;
			this.y = y;
		}
		
		void moveTo(Point p)
		{
			this.x = p.x;
			this.y = p.y;
		}
		Point clone(Point p)
		{
			Point newPoint = new Point();
			newPoint.x = p.x;
			newPoint.y = p.y;
			return(newPoint);
		}
		Point opposite(Point p)
		{
			Point newPoint = new Point();
			newPoint.x = -p.x;
			newPoint.y = -p.y;
			return(newPoint);
		}
}